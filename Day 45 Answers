import java.util.*;

Question 1: Ek empty stack banao jisme integers store honge. 5 numbers push karo aur stack print karo.
Stack<Integer> stack = new Stack<>();
stack.push(10);
stack.push(20);
stack.push(30);
stack.push(40);
stack.push(50);
System.out.println(stack);  // Output: [10, 20, 30, 40, 50]

Question 2: Ek stack banao aur 3 elements push karo, fir top element print karo.
Stack<Integer> stack = new Stack<>();
stack.push(5);
stack.push(15);
stack.push(25);
System.out.println("Top element: " + stack.peek());  // Output: 25

Question 3: Ek stack banao aur 3 elements push karo, fir top element print karo.
Stack<Integer> stack = new Stack<>();
stack.push(1);
stack.push(2);
stack.push(3);
stack.pop();  // removes 3
System.out.println(stack);  // Output: [1, 2]

Question 4: Ek stack banao aur check karo kya stack empty hai ya nahi.
Stack<Integer> stack = new Stack<>();
System.out.println(stack.isEmpty());  // Output: true

Question 5: Ek stack banao aur 3 elements push karo. Fir size print karo.
Stack<Integer> stack = new Stack<>();
stack.push(5);
stack.push(10);
stack.push(15);
System.out.println("Size: " + stack.size());  // Output: 3

Question 6: Ek stack me 1, 2, 3 push karo aur sabhi elements ko one by one pop karke print karo.

Stack<Integer> stack = new Stack<>();
stack.push(1);
stack.push(2);
stack.push(3);
while (!stack.isEmpty()) {
    System.out.println(stack.pop());
}
// Output: 3 2 1

Question 7:  Ek string stack banao aur usme 3 strings push karo. Fir last added string print karo.
Stack<String> stack = new Stack<>();
stack.push("Apple");
stack.push("Banana");
stack.push("Mango");
System.out.println(stack.peek());  // Output: Mango

Question 8:Ek stack banao aur usme 10 se chhote elements hi push karo.
Stack<Integer> stack = new Stack<>();
int[] arr = {2, 15, 8, 30, 4};
for (int num : arr) {
    if (num < 10) {
        stack.push(num);
    }
}
System.out.println(stack);  // Output: [2, 8, 4]

Question 9: Ek stack banao aur usme se reverse order me elements print karo using pop.
Stack<Integer> stack = new Stack<>();
stack.push(11);
stack.push(22);
stack.push(33);
while (!stack.isEmpty()) {
    System.out.println(stack.pop());
}
// Output: 33 22 11

Question 10: Ek stack banao jisme elements push karo aur har step ke baad current top print karo.
Stack<Integer> stack = new Stack<>();
stack.push(7);
System.out.println("Top: " + stack.peek());
stack.push(14);
System.out.println("Top: " + stack.peek());
stack.push(21);
System.out.println("Top: " + stack.peek());
// Output: Top: 7, Top: 14, Top: 21
