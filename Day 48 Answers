Day 48 Answers â€“ Stack Level 3                                                            
  
Question 1: Ek stack banao aur usme 1 se 10 tak ke numbers daalo. Fir usme se har dusra element remove karo.
Stack<Integer> stack = new Stack<>();
for (int i = 1; i <= 10; i++) {
    stack.push(i);
}
Stack<Integer> temp = new Stack<>();
boolean skip = false;
while (!stack.isEmpty()) {
    int val = stack.pop();
    if (!skip) temp.push(val);
    skip = !skip;
}
System.out.println("Filtered Stack:");
while (!temp.isEmpty()) {
    System.out.println(temp.pop());
}

Question 2: Ek stack banao aur usme 1 se 10 tak ke numbers daalo. Fir usme se har dusra element remove karo.
Stack<String> stack = new Stack<>();
stack.push("one");
stack.push("two");
stack.push("three");
stack.push("four");
stack.push("five");
while (!stack.isEmpty()) {
    String word = stack.pop();
    System.out.println(word + " -> length: " + word.length());
}

Question 3: Ek string lo aur uske characters ko stack me daalo. Fir vowel count karo.
String str = "education";
Stack<Character> stack = new Stack<>();
for (char ch : str.toCharArray()) {
    stack.push(ch);
}
int vowelCount = 0;
while (!stack.isEmpty()) {
    char ch = stack.pop();
    if ("aeiou".indexOf(ch) != -1) vowelCount++;
}
System.out.println("Vowel Count: " + vowelCount);

Question 4: Ek stack lo aur check karo ki usme palindrome banne wale elements hain ya nahi (1 2 3 2 1).
int[] arr = {1, 2, 3, 2, 1};
Stack<Integer> s1 = new Stack<>();
Stack<Integer> s2 = new Stack<>();
for (int i = 0; i < arr.length; i++) s1.push(arr[i]);
for (int i = arr.length - 1; i >= 0; i--) s2.push(arr[i]);
boolean same = true;
while (!s1.isEmpty()) {
    if (!s1.pop().equals(s2.pop())) {
        same = false;
        break;
    }
}
System.out.println("Palindrome stack? " + same);

Question 5: Ek stack lo jisme mixed even/odd numbers hain. Ek naye stack me sirf odd number daalo aur usko print karo.
Stack<Integer> stack = new Stack<>();
Stack<Integer> oddStack = new Stack<>();
stack.push(1); stack.push(2); stack.push(3); stack.push(4);
while (!stack.isEmpty()) {
    int val = stack.pop();
    if (val % 2 != 0) oddStack.push(val);
}
System.out.println("Odd values: " + oddStack);

Question 6:Ek stack lo aur usme sirf positive numbers store karo. Fir total ka square root calculate karo (manually using multiply).
Stack<Integer> stack = new Stack<>();
stack.push(4); stack.push(3); stack.push(5);
int sum = 0;
while (!stack.isEmpty()) {
    sum += stack.pop();
}
int sqrt = 0;
for (int i = 1; i * i <= sum; i++) {
    if (i * i == sum) sqrt = i;
}
System.out.println("Square root (manual): " + sqrt);

Question 7: Ek stack lo aur har element ke square ko ek ArrayList me daal kar print karo.
Stack<Integer> stack = new Stack<>();
ArrayList<Integer> list = new ArrayList<>();
stack.push(2); stack.push(3); stack.push(4);
while (!stack.isEmpty()) {
    int val = stack.pop();
    list.add(val * val);
}
System.out.println("Squares: " + list);

Question 8: Ek stack lo aur har element ko 2 se divide karke push karo naye stack me. Fir dono print karo.
Stack<Integer> stack = new Stack<>();
Stack<Integer> dividedStack = new Stack<>();
stack.push(10); stack.push(8); stack.push(6);
while (!stack.isEmpty()) {
    int val = stack.pop();
    dividedStack.push(val / 2);
}
System.out.println("Divided Stack: " + dividedStack);

Question 9: Ek string stack lo aur reverse karke nayi string bana kar print karo.
String str = "hello";
Stack<Character> stack = new Stack<>();
for (char ch : str.toCharArray()) stack.push(ch);
StringBuilder reversed = new StringBuilder();
while (!stack.isEmpty()) reversed.append(stack.pop());
System.out.println("Reversed: " + reversed);

Question 10: Ek stack lo aur har element ko pop karte waqt batao ki kitne elements abhi bhi bache hain.
Stack<Integer> stack = new Stack<>();
stack.push(1); stack.push(2); stack.push(3); stack.push(4);
while (!stack.isEmpty()) {
    System.out.println("Top: " + stack.pop() + ", Remaining: " + stack.size());
}
